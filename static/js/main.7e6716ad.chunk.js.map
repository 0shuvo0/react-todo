{"version":3,"sources":["components/Navbar.js","store/todo.js","components/TodoForm.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","prevData","localStorage","getItem","JSON","parse","todosState","atom","key","default","done","selector","get","data","td","forEach","d","completed","length","useTodosState","useRecoilState","todos","setTodos","addTodo","todo","trim","title","updateTodo","i","_todos","map","saveTodos","setItem","stringify","clearTodos","TodoForm","type","placeholder","onKeyUp","e","keyCode","target","value","ProgressBar","perc","useRecoilValue","style","width","Todos","content","useEffect","onClick","index","color","class","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAUeA,MARf,WACC,OACC,yBAAKC,UAAU,UACd,uBAAGC,KAAK,KAAR,gB,uBCHCC,EAAWC,aAAaC,QAAQ,UACpCF,EAAWA,GAAYG,KAAKC,MAAMJ,GAE3B,IAAIK,EAAaC,eAAK,CAC5BC,IAAK,aACLC,QAASR,GAAY,KAGXS,EAAOC,mBAAS,CACzBH,IAAK,cACLI,IAAK,YAAc,IACbC,GAAOD,EADK,EAAVA,KACSN,GACZQ,EAAK,EAMT,OALAD,EAAKE,SAAQ,SAAAC,GACTA,EAAEC,WACJH,OAGW,IAALA,EAAYD,EAAKK,UAIfC,EAAgB,WAAO,IAAD,EACVC,yBAAed,GADL,mBAC7Be,EAD6B,KACtBC,EADsB,KAGlC,MAAO,CACNC,QAAS,SAAAC,GACJA,GAASA,EAAKC,QAClBH,EAAS,CAAC,CAAEI,MAAOF,EAAMP,WAAW,IAA5B,mBAAuCI,MAEhDM,WAAY,SAAAC,GACX,IAAIC,EAASR,EAAMS,KAAI,SAAAN,GAAU,OAAO,eAAKA,MAC7CK,EAAOD,GAAGX,WAAaY,EAAOD,GAAGX,UACjCK,EAASO,IAEVE,UAAW,WACV7B,aAAa8B,QAAQ,SAAU5B,KAAK6B,UAAUZ,KAE/Ca,WAAY,kBAAMZ,EAAS,KAC3BZ,KAAM,eCjCOyB,MALf,WAAoB,IACXZ,EAAaJ,IAAbI,QACR,OAAO,2BAAOa,KAAK,OAAOC,YAAY,mBAAmBC,QAAS,SAACC,GAAD,OAAqB,KAAdA,EAAEC,UAAmBjB,EAAQgB,EAAEE,OAAOC,OAAQH,EAAEE,OAAOC,MAAQ,QCDzI,SAASC,IACR,IAAIC,EAAOC,yBAAenC,GAC1B,OACC,yBAAKX,UAAU,gBACd,yBAAKA,UAAU,WAAW+C,MAAO,CAACC,MAAOH,EAAO,QA0BpCI,MArBf,WACC,IAKIC,EALE5B,EAAQwB,yBAAevC,GADd,EAE8Ba,IAArCQ,EAFO,EAEPA,WAAYI,EAFL,EAEKA,UAAWG,EAFhB,EAEgBA,WAY/B,OAXAgB,qBAAU,WACTnB,MACE,CAACV,IAGH4B,EADE5B,EAAMH,OAAS,EACV,CAAIG,EAAMH,OAAS,GAAK,uBAAGnB,UAAU,SAAQ,0BAAMoD,QAASjB,GAAf,UAC/C,kBAACS,EAAD,OADE,mBAECtB,EAAMS,KAAI,SAACN,EAAM4B,GAAP,OAAiB,yBAAKrD,UAAU,OAAOS,IAAK4C,EAAOD,QAAS,kBAAMxB,EAAWyB,KAAU5B,EAAKE,MAA3E,IAAmF,yBAAKoB,MAAO,CAACO,MAAO7B,EAAKP,UAAY,UAAY,YAAjD,KAAiEO,EAAKP,UAAY,YAAc,iBAE5M,uBAAGlB,UAAU,OAAb,eAGV,yBAAKuD,MAAM,SACRL,ICbUM,MAVf,WACC,OACC,yBAAKC,GAAG,OACP,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,aAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7e6716ad.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Navbar(){\r\n\treturn (\r\n\t\t<div className=\"navbar\">\r\n\t\t\t<a href=\"?\">React Todo</a>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Navbar","import { atom, selector, useRecoilState } from 'recoil'\r\n\r\nlet prevData = localStorage.getItem('rtdata')\r\nprevData = prevData && JSON.parse(prevData)\r\n\r\nexport let todosState = atom({\r\n\tkey: 'todosState',\r\n\tdefault: prevData || []\r\n})\r\n\r\nexport let done = selector({\r\n\t\tkey: 'percentDone',\r\n\t\tget: ({ get }) => {\r\n\t\t\tlet  data = get(todosState)\r\n\t\t\tlet td = 0\r\n\t\t\tdata.forEach(d => {\r\n\t\t\t\tif(d.completed){\r\n\t\t\t\t\ttd++\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\treturn (td * 100) / data.length\r\n\t\t}\r\n})\r\n\r\nexport const useTodosState = () => {\r\n\tlet [todos, setTodos] = useRecoilState(todosState)\r\n\t\r\n\treturn {\r\n\t\taddTodo: todo => {\r\n\t\t\tif(!todo || !todo.trim()) return\r\n\t\t\tsetTodos([{ title: todo, completed: false}, ...todos])\r\n\t\t},\r\n\t\tupdateTodo: i => {\r\n\t\t\tlet _todos = todos.map(todo => { return { ...todo }})\r\n\t\t\t_todos[i].completed = !_todos[i].completed\r\n\t\t\tsetTodos(_todos)\r\n\t\t},\r\n\t\tsaveTodos: () => {\r\n\t\t\tlocalStorage.setItem('rtdata', JSON.stringify(todos))\r\n\t\t},\r\n\t\tclearTodos: () => setTodos([]),\r\n\t\tdone: () => {\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}","import React from \"react\"\r\nimport { useTodosState } from '../store/todo'\r\n\r\nfunction TodoForm(){\r\n\tconst { addTodo }  = useTodosState()\r\n\treturn <input type=\"text\" placeholder=\"Enter a new todo\" onKeyUp={(e) => e.keyCode === 13 && (addTodo(e.target.value), e.target.value = \"\")} />\r\n}\r\n\r\nexport default TodoForm","import React, { useEffect } from \"react\"\r\nimport { useRecoilValue } from 'recoil'\r\nimport { todosState, done, useTodosState } from '../store/todo'\r\n\r\nfunction ProgressBar(){\r\n\tlet perc = useRecoilValue(done)\r\n\treturn (\r\n\t\t<div className=\"progress-bar\">\r\n\t\t\t<div className=\"progress\" style={{width: perc + '%'}}></div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction Todos(){\r\n\tconst todos = useRecoilValue(todosState)\r\n\tconst { updateTodo, saveTodos, clearTodos} = useTodosState()\r\n\tuseEffect(() => {\r\n\t\tsaveTodos()\r\n\t}, [todos])\r\n\tlet content\r\n\tif(todos.length > 0){\r\n\t\tcontent = [todos.length > 0 && <p className=\"clear\"><span onClick={clearTodos}>clear</span></p>,\r\n\t\t\t\t\t\t\t<ProgressBar />,\r\n\t\t\t\t\t\t\t...todos.map((todo, index) => <div className=\"todo\" key={index} onClick={() => updateTodo(index)}>{ todo.title } <sub style={{color: todo.completed ? \"#03A9F4\" : \"#4CAF50\"}}>- { todo.completed ? \"completed\" : \"pending\" }</sub></div>)]\r\n\t}else{\r\n\t\tcontent = <p className=\"msg\">Jobless ...</p>\r\n\t}\r\n\treturn (\r\n\t\t<div class=\"todos\">\r\n\t\t\t{ content }\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Todos\r\n\r\n\r\n","import React from \"react\"\r\n\r\nimport Navbar from \"./components/Navbar\"\r\nimport TodoForm from \"./components/TodoForm\"\r\nimport Todos from \"./components/Todos\"\r\n\r\nfunction App(){\r\n\treturn (\r\n\t\t<div id=\"app\">\r\n\t\t\t<Navbar />\r\n\t\t\t<TodoForm />\r\n\t\t\t<Todos />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {  RecoilRoot } from 'recoil'\nimport \"./assets/style.css\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}